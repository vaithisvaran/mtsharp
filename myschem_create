create or replace schema MYSCHEMA;

create or replace sequence DEPARTMENTS_SEQ start with 280 increment by 10 noorder;
create or replace sequence EMPLOYEES_SEQ start with 207 increment by 1 noorder;
create or replace sequence LOCATIONS_SEQ start with 3300 increment by 100 noorder;
create or replace TABLE COUNTRIES (
	COUNTRY_ID VARCHAR(2) NOT NULL,
	COUNTRY_NAME VARCHAR(40),
	REGION_ID NUMBER(38,0),
	constraint COUNTRY_C_ID_PK primary key (COUNTRY_ID)
);
create or replace TABLE DEPARTMENTS (
	DEPARTMENT_ID NUMBER(4,0),
	DEPARTMENT_NAME VARCHAR(30) NOT NULL,
	MANAGER_ID NUMBER(6,0),
	LOCATION_ID NUMBER(4,0)
);
create or replace TABLE DEPT (
	DEPTNO NUMBER(38,0) NOT NULL,
	DNAME VARCHAR(50) NOT NULL,
	LOCATION VARCHAR(50) NOT NULL,
	primary key (DEPTNO)
);
create or replace TABLE EMP cluster by (EMPNO,DEPTNO)(
	EMPNO NUMBER(38,0) NOT NULL,
	ENAME VARCHAR(50) NOT NULL,
	JOB VARCHAR(50) NOT NULL,
	MGR NUMBER(38,0),
	HIREDATE DATE,
	SAL NUMBER(10,2),
	COMM NUMBER(10,2),
	DEPTNO NUMBER(38,0) NOT NULL,
	primary key (EMPNO)
);
create or replace TABLE EMP1 (
	ID NUMBER(38,0),
	NAME VARCHAR(16777216),
	SALARY NUMBER(38,0),
	DEPT NUMBER(38,0)
);
create or replace TRANSIENT TABLE EMP1_CL (
	ID NUMBER(38,0),
	NAME VARCHAR(16777216),
	SALARY NUMBER(38,0),
	DEPT NUMBER(38,0)
);
create or replace TABLE EMPLOYEES (
	EMPLOYEE_ID NUMBER(6,0),
	FIRST_NAME VARCHAR(20),
	LAST_NAME VARCHAR(25) NOT NULL,
	EMAIL VARCHAR(25) NOT NULL,
	PHONE_NUMBER VARCHAR(20),
	HIRE_DATE DATE NOT NULL,
	JOB_ID VARCHAR(10) NOT NULL,
	SALARY NUMBER(8,2),
	COMMISSION_PCT NUMBER(2,2),
	MANAGER_ID NUMBER(6,0),
	DEPARTMENT_ID NUMBER(4,0),
	constraint EMP_EMAIL_UK unique (EMAIL)
);
create or replace TABLE EMP_CLONE (
	EMPNO NUMBER(38,0) NOT NULL,
	ENAME VARCHAR(50) NOT NULL,
	JOB VARCHAR(50) NOT NULL,
	MGR NUMBER(38,0),
	HIREDATE DATE,
	SAL NUMBER(10,2),
	COMM NUMBER(10,2),
	DEPTNO NUMBER(38,0) NOT NULL,
	primary key (EMPNO)
);
create or replace TABLE EMP_CTAS (
	EMPNO NUMBER(38,0),
	ENAME VARCHAR(50),
	JOB VARCHAR(50),
	MGR NUMBER(38,0),
	HIREDATE DATE,
	SAL NUMBER(10,2),
	COMM NUMBER(10,2),
	DEPTNO NUMBER(38,0)
);
create or replace TABLE EMP_LIKE (
	EMPNO NUMBER(38,0) NOT NULL,
	ENAME VARCHAR(50) NOT NULL,
	JOB VARCHAR(50) NOT NULL,
	MGR NUMBER(38,0),
	HIREDATE DATE,
	SAL NUMBER(10,2),
	COMM NUMBER(10,2),
	DEPTNO NUMBER(38,0) NOT NULL,
	primary key (EMPNO)
);
create or replace TABLE JOBS (
	JOB_ID VARCHAR(10),
	JOB_TITLE VARCHAR(35) NOT NULL,
	MIN_SALARY NUMBER(6,0),
	MAX_SALARY NUMBER(6,0)
);
create or replace TABLE JOB_HISTORY (
	EMPLOYEE_ID NUMBER(6,0) NOT NULL,
	START_DATE DATE NOT NULL,
	END_DATE DATE NOT NULL,
	JOB_ID VARCHAR(10) NOT NULL,
	DEPARTMENT_ID NUMBER(4,0)
);
create or replace TABLE LOCATIONS (
	LOCATION_ID NUMBER(4,0),
	STREET_ADDRESS VARCHAR(40),
	POSTAL_CODE VARCHAR(12),
	CITY VARCHAR(30) NOT NULL,
	STATE_PROVINCE VARCHAR(25),
	COUNTRY_ID VARCHAR(2)
);
create or replace TABLE REGIONS (
	REGION_ID NUMBER(38,0) NOT NULL,
	REGION_NAME VARCHAR(25)
);
create or replace TABLE SALGRADE (
	GRADE NUMBER(38,0) NOT NULL,
	LOSAL NUMBER(10,2),
	HISAL NUMBER(10,2),
	primary key (GRADE)
);
create or replace view EMP_DETAILS_VIEW(
	EMPLOYEE_ID,
	JOB_ID,
	MANAGER_ID,
	DEPARTMENT_ID,
	LOCATION_ID,
	COUNTRY_ID,
	FIRST_NAME,
	LAST_NAME,
	SALARY,
	COMMISSION_PCT,
	DEPARTMENT_NAME,
	JOB_TITLE,
	CITY,
	STATE_PROVINCE,
	COUNTRY_NAME,
	REGION_NAME
) as
SELECT
  e.employee_id,
  e.job_id,
  e.manager_id,
  e.department_id,
  d.location_id,
  l.country_id,
  e.first_name,
  e.last_name,
  e.salary,
  e.commission_pct,
  d.department_name,
  j.job_title,
  l.city,
  l.state_province,
  c.country_name,
  r.region_name
FROM
  employees e
  INNER JOIN departments d ON e.department_id = d.department_id
  INNER JOIN jobs j ON j.job_id = e.job_id
  INNER JOIN locations l ON d.location_id = l.location_id
  INNER JOIN countries c ON l.country_id = c.country_id
  INNER JOIN regions r ON c.region_id = r.region_id;
CREATE OR REPLACE FILE FORMAT MY_FORMAT
	SKIP_HEADER = 1
	FIELD_OPTIONALLY_ENCLOSED_BY = '\"'
	NULL_IF = ('NULL,null')
	ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE
;
CREATE OR REPLACE FUNCTION "GET_SALES"()
RETURNS NUMBER(38,0)
LANGUAGE SQL
AS '
    SELECT 1
';
CREATE OR REPLACE FUNCTION "MY_FUNC"()
RETURNS NUMBER(38,0)
LANGUAGE SQL
AS '
     SELECT 1
    ';
CREATE OR REPLACE PROCEDURE "RETURN_GREATER"("NUMBER_1" NUMBER(38,0), "NUMBER_2" NUMBER(38,0))
RETURNS NUMBER(38,0)
LANGUAGE SQL
EXECUTE AS OWNER
AS 'BEGIN
  IF (number_1 > number_2) THEN
    RETURN number_1;
  ELSE
    RETURN number_2;
  END IF;
END';
create or replace stream EMP1_ST_CL on table EMP1_CL;
create or replace stream EMP_ST on table EMP;
create or replace pipe MY_PIPE auto_ingest=true as copy into emp1 from @emp1_stage;
create or replace task MY_TASK
	schedule='USING CRON 1 * * * SUN America/Los_Angeles'
	USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE='XSMALL'
	when SYSTEM$STREAM_HAS_DATA('EMP_ST')
	as MERGE INTO EMP USING EMP_ST
ON (EMP.EMPNO = EMP_ST.EMPNO)
WHEN MATCHED THEN
UPDATE SET EMP.ENAME=EMP_ST.ENAME
WHEN NOT MATCHED THEN 
INSERT (EMP.EMPNO,EMP.ENAME,EMP.JOB,EMP.MGR,EMP.HIREDATE,EMP.SAL,EMP.COMM,EMP.DEPTNO)
    VALUES(EMP_ST.EMPNO,EMP_ST.ENAME,EMP_ST.JOB,EMP_ST.MGR,EMP_ST.HIREDATE,EMP_ST.SAL,EMP_ST.COMM,EMP_ST.DEPTNO);
